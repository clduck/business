<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
          http://www.springframework.org/schema/aop
          http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
          http://www.springframework.org/schema/tx 
          http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-2.5.xsd">
    <!-- 使用PropertyPlaceholderConfigurer来加入外部属性(.properties)文件 -->      
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 可以使用locations属性和list元素对，定义多个配置文件 -->
		<property name="locations">
			<list>
				<value>classpath:/config/dataBase.properties</value>
			</list>
		</property>
	</bean>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	  <property name="driverClass" value="${jdbc.driverClassName}"></property>  
	  <property name="jdbcUrl" value="${jdbc.url}"></property>  
	  <property name="user" value="${jdbc.username}"></property>
	  <property name="password" value="${jdbc.password}"></property>
	</bean>
	
     <!-- 添加事务 -->
  	<aop:config>
  	 <aop:pointcut id="serviceImpl" expression="execution(* com.business.service.impl.*.*(..))" />
  	 <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceImpl"/>
  	</aop:config>
  	
	 <!-- 事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
      <tx:attributes>
        <tx:method name="insert*"  read-only="false"  rollback-for="UnsupportedOperationException"/>
         <!-- spring和ibatis整合后的声明式事务本身没有问题,而是如果需要回滚的话,spring必须catch住runtime的异常,但是如果人为的去捕获了该异常再进行别的处理以后,则回滚不在处理.-->
        <tx:method name="modify*" read-only="false" rollback-for="UnsupportedOperationException"/>
      </tx:attributes> 
    </tx:advice>
   
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
      <property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!-- 配置ibatis  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="dataSource"/>
      <property name="configLocation" value="classpath:/config/mybatis.xml" />
      <property name="mapperLocations" value="classpath:/config/sqlmaps/*.xml"/>
    </bean>
    
</beans>
